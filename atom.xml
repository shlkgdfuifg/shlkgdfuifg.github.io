<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青山</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-10-27T11:59:03.513Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>青山</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浏览器模型基础</title>
    <link href="http://yoursite.com/2020/10/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A8%A1%E5%9E%8B%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2020/10/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A8%A1%E5%9E%8B%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</id>
    <published>2020-10-27T11:55:51.841Z</published>
    <updated>2020-10-27T11:59:03.513Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浏览器模型问题"><a href="#浏览器模型问题" class="headerlink" title="浏览器模型问题"></a>浏览器模型问题</h1><p>多进程与多线程</p><h3 id="浏览器的多进程"><a href="#浏览器的多进程" class="headerlink" title="浏览器的多进程"></a>浏览器的多进程</h3><p>以chrome为代表的主流浏览器都是使用多进程的模型，主要有五种进程</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20201021174728754.png" alt="image-20201021174728754"></p><ul><li>Browser Process: 浏览器主进程，负责主控和调用，创建和销毁其他进程。</li><li>GPU Process: 主要负责GPU相关操作。</li><li>Renderer Process: 每创建一个tab页就会开启一个Renderer Process 负责对应的tab页的内部网页呈现的所有，比如说页面渲染，事件执行，脚本执行。这个进程是多线程的。它就是常说的浏览器内核</li><li>Plugin Process: 启用一个插件就会创建一个对应的进程。</li></ul><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20201021175217987.png" alt="image-20201021175217987"></p><h3 id="浏览器的多线程"><a href="#浏览器的多线程" class="headerlink" title="浏览器的多线程"></a>浏览器的多线程</h3><p>Renderer Process是浏览器为每一个tab页单独启用的进程，所以每一个Renderer Process 都会有独立的渲染引擎实例。一般来说一个tab下会有如下五个线程</p><p><img src="https://my-blog-rookie.oss-cn-beijing.aliyuncs.com/img/image-20201021180735426.png" alt="image-20201021180735426"></p><ul><li>CUI线程: 这个线程负责渲染页面的html元素，它再重绘和重排的时候会执行。这个线程和 JS引擎线程互斥。</li></ul><blockquote><p>HTML渲染大致分为如下几步：</p><ol><li>HTML被HTML解析器解析成DOM Tree, css则被css解析器解析成CSSOM Tree。</li><li>DOM Tree和CSSOM Tree解析完成后，被附加到一起，形成渲染树（Render Tree）。</li><li>节点信息计算(重排)，这个过程被叫做Layout(Webkit)或者Reflow(Mozilla)。即根据渲染树计算每个节点的几何信息。</li><li>渲染绘制(重绘)，这个过程被叫做(Painting 或者 Repaint)。即根据计算好的信息绘制整个页面。</li></ol><p>以上4步简述浏览器的一次渲染过程，理论上，每一次的dom更改或者css几何属性更改，都会引起一次浏览器的重排/重绘过程，而如果是css的非几何属性更改，则只会引起重绘过程。所以说重排一定会引起重绘，而重绘不一定会引起重排。</p></blockquote><ul><li>JS引擎线程(chrome的V8)：JS内核，在后台等待任务，负责解析运行 JS 代码，在一个 Renderer 进程之中同时只能有一个 JS 线程。（JS的单线程性）</li><li>定时触发线程：setTimeout和setInterval的计时器线程，由于 JS 的单线程性，所以设计成又单独的线程计时。</li><li>事件触发线程：负责将浏览器和其他线程触发的符合要求的事件添加到 JS 引擎队列的末尾，等待 JS 引擎执行。</li><li>异步请求线程：在XMLHttpRequest在连接后是通过浏览器新开一个线程请求， 将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件放到 JavaScript引擎的处理队列中等待处理。</li></ul><p>关于JS单线程的解决</p><blockquote><p>为了多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。</p></blockquote><h2 id="web-workers"><a href="#web-workers" class="headerlink" title="web workers"></a>web workers</h2><h3 id="web-workers的概念"><a href="#web-workers的概念" class="headerlink" title="web workers的概念"></a>web workers的概念</h3><blockquote><p>Web Worker为Web内容在后台线程中运行脚本提供了一种简单的方法。线程可以执行任务而不干扰用户界面。一旦创建， 一个worker 可以将消息发送到创建它的JavaScript代码, 通过将消息发布到该代码指定的事件处理程序（反之亦然）。</p></blockquote><h3 id="web-workers的用法"><a href="#web-workers的用法" class="headerlink" title="web workers的用法"></a>web workers的用法</h3><p>使用构造函数可以创建一个worker对象，构造函数接受一个JavaScript文件的URL，这个文件就是将要在worker线程中运行的代码。值得注意的是worker将会运行在与页面window对象完全不同的全局上下文中。</p><p>在worker线程中你可以运行大部分代码，但是有一些例外：</p><ul><li>DOM对象</li><li>window对象的某些属性和方法</li><li>documen对象</li><li>parent对象</li></ul><p>详细的信息可以参考：<a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers" target="_blank" rel="noopener">Functions and classes available to Web Workers</a></p><h3 id="特殊种类的web-workers"><a href="#特殊种类的web-workers" class="headerlink" title="特殊种类的web workers"></a>特殊种类的web workers</h3><ul><li><p>shared workers：可以被不同窗口的对各脚本运行，只要这些workers处于同一个主域。详细的用法会在之后的博文介绍</p></li><li><p>service workers ：般作为web应用程序、浏览器和网络（如果可用）之间的代理服务。他们旨在（除开其他方面）创建有效的离线体验，拦截网络请求，以及根据网络是否可用采取合适的行动，更新驻留在服务器上的资源。他们还将允许访问推送通知和后台同步API。</p><blockquote><p>从网络安全的角度看，此woekers可以被利用成一个持久化XSS的工具。</p></blockquote></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_APIs" target="_blank" rel="noopener">官方文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;浏览器模型问题&quot;&gt;&lt;a href=&quot;#浏览器模型问题&quot; class=&quot;headerlink&quot; title=&quot;浏览器模型问题&quot;&gt;&lt;/a&gt;浏览器模型问题&lt;/h1&gt;&lt;p&gt;多进程与多线程&lt;/p&gt;
&lt;h3 id=&quot;浏览器的多进程&quot;&gt;&lt;a href=&quot;#浏览器的多进程&quot; cl
      
    
    </summary>
    
    
      <category term="浏览器模型" scheme="http://yoursite.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A8%A1%E5%9E%8B/"/>
    
    
      <category term="web workers" scheme="http://yoursite.com/tags/web-workers/"/>
    
      <category term="JS相关" scheme="http://yoursite.com/tags/JS%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>对文件上传的一些小理解</title>
    <link href="http://yoursite.com/2020/07/17/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/07/17/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/</id>
    <published>2020-07-17T02:41:32.427Z</published>
    <updated>2020-07-18T07:12:19.734Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PHP的-FILES数组"><a href="#PHP的-FILES数组" class="headerlink" title="PHP的$_FILES数组"></a>PHP的$_FILES数组</h3><h3 id="如果网页有文件上传的表单，那么在客户端提交之后，就有一个-FILES数组可以直接利用"><a href="#如果网页有文件上传的表单，那么在客户端提交之后，就有一个-FILES数组可以直接利用" class="headerlink" title="如果网页有文件上传的表单，那么在客户端提交之后，就有一个$_FILES数组可以直接利用"></a>如果网页有文件上传的表单，那么在客户端提交之后，就有一个$_FILES数组可以直接利用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 $_FILES[&#39;File&#39;][&#39;name&#39;] 客户端文件的原名称。</span><br><span class="line">2 $_FILES[&#39;File&#39;][&#39;type&#39;] 文件的 MIME 类型，需要浏览器提供该信息的支持，例如&quot;im</span><br><span class="line">age&#x2F;gif&quot;。</span><br><span class="line">3 $_FILES[&#39;File&#39;][&#39;size&#39;] 已上传文件的大小，单位为字节。</span><br><span class="line">4 $_FILES[&#39;File&#39;][&#39;tmp_name&#39;] 文件被上传后在服务端储存的临时文件名，一般是系统默</span><br><span class="line">认。可以在php.ini的upload_tmp_dir 指定，但 用 putenv() 函数设置是不起作用的。</span><br></pre></td></tr></table></figure><h2 id="什么是MIME类型？"><a href="#什么是MIME类型？" class="headerlink" title="什么是MIME类型？"></a>什么是MIME类型？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MIME type的全称为Multipurpose Internet Mail Extensions(多用途互联网邮件扩展类型)</span><br><span class="line">是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览</span><br><span class="line">器会自动使用指定应用程序来打开。Response对象通过设置ContentType使客户端浏览器，区分</span><br><span class="line">不同种类的数据，并根据不同的MIME调用浏览器内不同的程序嵌入模块来处理相应的数据。</span><br><span class="line">MIME type类型格式</span><br><span class="line">类别&#x2F;子类别;参数 Content-Type: [type]&#x2F;[subtype]; parameter</span><br><span class="line">MIME type主类别</span><br><span class="line">text：用于标准化地表示的文本信息，人类可读的，可以是多种字符集和或者多种格式；</span><br><span class="line">Multipart：用于连接消息体的多个部分构成一个消息，这些部分可以是不同类型的数据；</span><br><span class="line">Application：用于传输应用程序数据或者二进制数据；</span><br><span class="line">Message：用于包装一个E-mail消息；</span><br><span class="line">Image：用于传输静态图片数据；</span><br><span class="line">Audio：用于传输音频或者音声数据；</span><br><span class="line">Video：用于传输动态影像数据，可以是与音频编辑在一起的视频数据格式。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对于text文件类型若没有特定的subtype，就使用 text&#x2F;plain。类似的，二进制文件没有特定或已</span><br><span class="line">知的 subtype，即使用 application&#x2F;octet-stream。</span><br></pre></td></tr></table></figure><h1 id="文件上传校验方式概述"><a href="#文件上传校验方式概述" class="headerlink" title="文件上传校验方式概述"></a>文件上传校验方式概述</h1><p>用HTTP协议传输文件到服务器时，将以POST请求的形式发送到服务器，一般来说会有如下几个步骤</p><p><img src="https://img-blog.csdnimg.cn/20190830165438915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM4MTAzNjU4,size_16,color_FFFFFF,t_70" alt="img"></p><h2 id="一个特别的攻击方法——PUT方法"><a href="#一个特别的攻击方法——PUT方法" class="headerlink" title="一个特别的攻击方法——PUT方法"></a>一个特别的攻击方法——PUT方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WebDAV是一种基于HTTP1.1的通信协议，他在GET,POST,HEAD等HTTP常用方法的基础上扩展</span><br><span class="line">了一些新的方法，使得应用程序可以直接对服务器进行读写操作，当WebDAV开启</span><br><span class="line">PUT,MOVE,DELETE攻击者就可以向服务器上传危险脚本。</span><br></pre></td></tr></table></figure><h1 id="服务器解析漏洞"><a href="#服务器解析漏洞" class="headerlink" title="服务器解析漏洞"></a>服务器解析漏洞</h1><h3 id="一、apache解析漏洞"><a href="#一、apache解析漏洞" class="headerlink" title="一、apache解析漏洞"></a>一、apache解析漏洞</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apache的文件解析的基本流程</span><br></pre></td></tr></table></figure><ol><li>客户端请求文件</li><li>查找mime.type里是否有这种mime类型</li><li>如果有，返回相应的content-type给浏览器，并将文件交给相应的处理器处理<br>如果没有，就不返回content-type给浏览器，直接返回文件内容。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">解析缺陷漏洞</span><br><span class="line">apache解析文件是从右往左开始判断解析的，直到找到一个可以解析的后缀名（apache可以解析的文件后缀名都记录在  Apache&#x2F;conf&#x2F;mine.type  这个文件里面了），</span><br><span class="line">比如说，demo.php.owf.rar，在这个文件名中owf、rar都是apache无法识别的后缀名， apache就会把这个文件解析成PHP文件</span><br><span class="line"></span><br><span class="line"> 一个有趣的问题</span><br><span class="line"></span><br><span class="line">我在调试这个漏洞的时候，发现总是返回500错误，既不正常执行文件，也不返回文件内容，后来才知道了这PHP与apache的交互方式，以及php识别文件的设置有关相关</span><br><span class="line">PHP识别文件</span><br><span class="line">当apache把解析成php文件之后，会把文件交给php处理，但是php会再一次检验文件，这是检验</span><br><span class="line">的正则：&quot;.+\.ph(p[ 345 ]?|t|tml)$&quot; 可以看出PHP只认最后一个后缀名。</span><br><span class="line">apache和PHP交互的方式主要有两种</span><br><span class="line">CGI方式：使用此模式时，当动态请求到达时，httpd会临时启动一个CGI解释器，并用CGI协议转</span><br><span class="line">发要执行的内容，CGI程序运行结束之后会将结果返回给httpd，然后自毁。当面对多个动态请求</span><br><span class="line">时，就要先后启动多个CGI解释器，因此效率极低。不过可以使用FASTCGI让CGI解释器更快的实</span><br><span class="line">现，提升效率</span><br><span class="line">模块方式：将php的模块编译到apache之中，在这种交互模式下，httpd在启动时就会激活、加载</span><br><span class="line">php模块，这就意味着，php会一直在httpd的底层挂载，只要请求到达，就把请求直接转发给内</span><br><span class="line">部的php模块。</span><br><span class="line">没有修改php识别文件的正则匹配时上传demo.php.xxx这种文件，处于CGI（FASTCGI）模式</span><br><span class="line">时PHP解释器就会返回500错误，处于模块模式就会直接返回文件内容</span><br></pre></td></tr></table></figure><h3 id="配和hatccess文件上传（要求使用模块方式）"><a href="#配和hatccess文件上传（要求使用模块方式）" class="headerlink" title="配和hatccess文件上传（要求使用模块方式）"></a>配和hatccess文件上传（要求使用模块方式）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess</span><br><span class="line">文件，可以实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许&#x2F;阻止特定的用户</span><br><span class="line">或者目录的访问、禁止目录列表、配置默认文档等功能IIS平台上不存在该文件，该文件默认开启，</span><br><span class="line">启用和关闭在httpd.conf文件中配置，在文件解析漏洞中只关心他的一个功能——修改MIME类型</span><br></pre></td></tr></table></figure><p>有些上传没有过滤掉htaccess文件，那么就可以上传一个htaccess文件来使服务器把上传的文件当作php解析。在.htaccess文件中写入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 AddType application&#x2F;x‐httpd‐php xxx</span><br></pre></td></tr></table></figure><p>就可以使.htaccess文件所在目录及其子目录中的后缀为.xxx的文件被Apache当做php文件解析。</p><h3 id="二、IIS6-x解析漏洞（使用这个版本的网站大多比较老，开发语句一般为asp）"><a href="#二、IIS6-x解析漏洞（使用这个版本的网站大多比较老，开发语句一般为asp）" class="headerlink" title="二、IIS6.x解析漏洞（使用这个版本的网站大多比较老，开发语句一般为asp）"></a>二、IIS6.x解析漏洞（使用这个版本的网站大多比较老，开发语句一般为asp）</h3><h3 id="路径解析漏洞"><a href="#路径解析漏洞" class="headerlink" title="路径解析漏洞"></a>路径解析漏洞</h3><p>原理：服务器默认会把.asp，.asa目录下的文件都解析成asp文件例如：demo.asp/shell.jpg   其中的shell.jpg就会被当作asp文件解析</p><h3 id="文件解析漏洞"><a href="#文件解析漏洞" class="headerlink" title="文件解析漏洞"></a>文件解析漏洞</h3><p>原理：服务器默认不解析;号后面的内容，因此xx.asp;.jpg便被解析成asp文件了例如：demo.asp;.jpg    , 会被解析成asp文件</p><h1 id="user-ini文件"><a href="#user-ini文件" class="headerlink" title=".user.ini文件"></a>.user.ini文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">那么什么是.user.ini？</span><br><span class="line">php.ini是php默认的配置文件，其中包括了很多php的配置，这些配置中，又分为几种：</span><br><span class="line">PHP_INI_SYSTEM、PHP_INI_PERDIR、PHP_INI_ALL、PHP_INI_USER。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">自 PHP 5.3.0 起，PHP 支持基于每个目录的 .htaccess 风格的 INI 文件。此类文件仅被 CGI／</span><br><span class="line">FastCGI SAPI 处理。此功能使得 PECL 的 htscanner 扩展作废。如果使用 Apache，则用</span><br><span class="line">.htaccess 文件有同样效果， .user.ini 风格的 INI 文件中只有具有 PHP_INI_PERDIR 和</span><br><span class="line">PHP_INI_USER 模式的 INI 设置可被识别。</span><br><span class="line">总之，user.ini实际上就是一个可以由用户“自定义”的php.ini，我们能够自定义的设置是模式</span><br><span class="line">为“PHP_INI_PERDIR 、 PHP_INI_USER”的设置</span><br></pre></td></tr></table></figure><h3 id="在php的配置有两项配置可以利用"><a href="#在php的配置有两项配置可以利用" class="headerlink" title="在php的配置有两项配置可以利用"></a>在php的配置有两项配置可以利用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 auto_append_file PHP_INI_PERDIR</span><br><span class="line">2 auto_prepend_file PHP_INI_PERDIR</span><br></pre></td></tr></table></figure><p>这两个配置可以使.user.ini文件影响的范围内每个php文件自动包含一个文件，那么就可以</p><p>通过这个配置直接包含一个后门</p><h3 id="构造-user-ini文件"><a href="#构造-user-ini文件" class="headerlink" title="构造.user.ini文件"></a>构造.user.ini文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 auto_prepend_file&#x3D;shell.gif</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;PHP的-FILES数组&quot;&gt;&lt;a href=&quot;#PHP的-FILES数组&quot; class=&quot;headerlink&quot; title=&quot;PHP的$_FILES数组&quot;&gt;&lt;/a&gt;PHP的$_FILES数组&lt;/h3&gt;&lt;h3 id=&quot;如果网页有文件上传的表单，那么在客户端提交之后
      
    
    </summary>
    
    
      <category term="文件上传漏洞" scheme="http://yoursite.com/categories/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    
    
      <category term="MINE类型" scheme="http://yoursite.com/tags/MINE%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="服务器解析漏洞" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
</feed>
